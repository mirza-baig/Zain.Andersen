/**
 * Describes a file that represents a component definition
 */

export interface ProviderObjectFile {
  path: string;
  moduleName: string;
  providerName: string;
}

/**
 * Generates the contents of the component factory file using a predefined string template.
 * @param components - the list of component files to include
 * @returns component factory file contents
 */
function generateRulesActionFactory(providers: Array<any>): string {
  const providerObjectFiles = providers.filter((provider) => provider.path) as ProviderObjectFile[];

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-rules-action-factory.ts to modify the generation of this file.

import { RuleActionData } from 'lib/rules/serialization';
import { RuleAction } from 'lib/rules/actions';
import { RuleContext } from 'lib/rules/rules';

${providerObjectFiles
  .map((provider) => {
    return `
import {
  ${provider.moduleName},
  ${provider.moduleName}Id
} from '${provider.path}';`;
  })
  .join('\n')}

export function getRulesActionFactory<T extends RuleContext>(action: RuleActionData): RuleAction<T> | null {
  ${providerObjectFiles
    .map((provider) => {
      return `
  if (action.id === ${provider.moduleName}Id) {
    const act = new ${provider.moduleName}(action);
    act.id = ${provider.moduleName}Id;
    return act;
  }`;
    })
    .join('\n')}
  return null;
};
`;
}

export default generateRulesActionFactory;
