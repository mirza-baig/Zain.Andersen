/**
 * Describes a file that represents a component definition
 */
export interface ComponentFile {
  path: string;
  moduleName: string;
  componentName: string;
}

export interface PackageDefinition {
  name: string;
  components: {
    moduleName: string;
    componentName: string;
  }[];
}

const isLazyLoadingModule = (componentPath: string) => componentPath.includes('.dynamic');

const removeDynamicModuleNameEnding = (moduleName: string) =>
  moduleName.replace(/\.?dynamic$/i, '');

/**
 * Generates the contents of the component factory file using a predefined string template.
 * @param components - the list of component files to include
 * @returns component factory file contents
 */
function generateFieldFactory(components: (PackageDefinition | ComponentFile)[]): string {
  const componentFiles = components.filter(
    (component) => (component as ComponentFile).path
  ) as ComponentFile[];
  const packages = components.filter(
    (component) => (component as PackageDefinition).components
  ) as PackageDefinition[];

  const hasLazyModules = componentFiles.find((component) => isLazyLoadingModule(component.path));

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-form-factory.ts to modify the generation of this file.

${hasLazyModules ? "import dynamic from 'next/dynamic'" : ''}

${packages.map((pkg) => {
  const list = pkg.components.map((c) => c.moduleName).join(', ');

  return `import { ${list} } from '${pkg.name}'`;
})}
${componentFiles
  .map((component) => {
    if (isLazyLoadingModule(component.path)) {
      const moduleName = removeDynamicModuleNameEnding(component.moduleName);
      return `const ${moduleName} = {
  module: () => import('${component.path}'),
  element: (isEditing?: boolean) => isEditing ? require('${component.path}')?.default : dynamic(${moduleName}.module)
}`;
    }

    return `import ${component.moduleName} from '${component.path}';`;
  })
  .join('\n')}

  const components = new Map();

${packages.map((p) =>
  p.components.map(
    (component) => `components.set('${component.componentName}', ${component.moduleName})`
  )
)}
${componentFiles
  .map(
    (component) =>
      `components.set('${
        isLazyLoadingModule(component.path)
          ? removeDynamicModuleNameEnding(component.componentName)
          : component.componentName
      }', ${
        isLazyLoadingModule(component.path)
          ? removeDynamicModuleNameEnding(component.moduleName)
          : component.moduleName
      });`
  )
  .join('\n')}

import { FormFieldProps } from 'lib/forms';
import * as yup from 'yup';

// fieldFactory for react component
export function fieldFactoryComponent(props: FormFieldProps) {
  const Field = components.get(props.templateName.replaceAll(' ', ''))?.reactComponent;

  if (!!Field) return <Field {...props} />;

  return <></>;
}

// get field validation schema
export function fieldFactoryValidation(props: FormFieldProps, schema: yup.AnyObject) {
  const getValidationSchema = components.get(props.templateName.replaceAll(' ', ''))?.getValidationSchema;

  if (!!getValidationSchema) return getValidationSchema(props, schema);

}

//get Initial Value
export function initialFieldValueFactory(props: FormFieldProps, additionalDetails?: Record<string, unknown> | undefined) {
  const getInitialValue = components.get(props.templateName.replaceAll(' ', ''))?.getInitialValue;

  if (!!getInitialValue) return getInitialValue(props, additionalDetails);
}

`;
}

export default generateFieldFactory;
