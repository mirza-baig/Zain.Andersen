/**
 * Describes a file that represents a component definition
 */
export interface ActionObjectFile {
  path: string;
  moduleName: string;
  actionName: string;
}

/**
 * Generates the contents of the component factory file using a predefined string template.
 * @param components - the list of component files to include
 * @returns component factory file contents
 */
function generateFormActionFactory(actions: Array<any>): string {
  const actionObjectFiles = actions.filter((action) => action.path) as ActionObjectFile[];

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-form-factory.ts to modify the generation of this file.

${actionObjectFiles
  .map((action) => {
    return `import { ${action.moduleName} } from '${action.path}';`;
  })
  .join('\n')}

const actions = new Map();

${actionObjectFiles
  .map((action) => {
    return `actions.set('${action.actionName.toLowerCase()}',${action.moduleName})`;
  })
  .join('\n')}

import { IBaseSubmitAction } from 'src/helpers/Forms/SubmitActions/BaseSubmitAction';
import { FormProps } from 'components/forms/Form/Form';
import { FormFieldProps } from 'lib/forms';
import { ButtonProps } from 'src/helpers/Forms/Fields/NavigationButton/Button';

/**
 * @function constructor
 * @param  formData: unknown - Final object of the form fields and value mappings
 * @param  formProps: FormProps - Whole form level props
 * @param  actionFieldsProps: Foundation.EnterpriseWeb.Core.FieldSets.Forms.SubmitAction['fields'] - current action related fields
 */
export function formActionFactory(
  action: Partial<FormFieldProps>,
  formData: unknown,
  formProps?: FormProps,
  submitButtonProps?: ButtonProps,
  context?: any
): IBaseSubmitAction | undefined {
  const actionClass = actions.get(action.templateName?.replaceAll(' ', '').toLowerCase());

  if (!!actionClass)
    return new actionClass({
      formData: formData,
      formProps: formProps,
      actionFieldsProps: action.fields,
      submitButtonProps: submitButtonProps,
      context: context,
    });

  console.error(\`No action handler defined for \${action.templateName}\`);

  return undefined;
}
`;
}

export default generateFormActionFactory;
