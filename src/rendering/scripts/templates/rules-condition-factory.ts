/**
 * Describes a file that represents a component definition
 */

export interface ProviderObjectFile {
  path: string;
  moduleName: string;
  providerName: string;
  isClientCondition: boolean;
}

/**
 * Generates the contents of the component factory file using a predefined string template.
 * @param components - the list of component files to include
 * @returns component factory file contents
 */
function generateRulesConditionFactory(providers: Array<any>): string {
  const providerObjectFiles = providers.filter((provider) => provider.path) as ProviderObjectFile[];

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-Rules-condition-factory.ts to modify the generation of this file.

import { RuleConditionData } from 'lib/rules/serialization';
import { AndCondition, NotCondition, OrCondition, RuleCondition } from 'lib/rules/conditions';
import { RuleContext } from 'lib/rules/rules';

${providerObjectFiles
  .map((provider) => {
    return `
import {
  ${provider.moduleName},
  ${provider.moduleName}Id
} from '${provider.path}';`;
  })
  .join('\n')}

export function getRulesConditionFactory<T extends RuleContext>(condition: RuleConditionData): RuleCondition<T> | null {
  if (condition.type == 'or') {
    const leftOperand = getRulesConditionFactory(condition.left as RuleConditionData);
    const rightOperand = getRulesConditionFactory(condition.right as RuleConditionData);
    if (!leftOperand || !rightOperand) {
      return null;
    }
    return new OrCondition(leftOperand, rightOperand);
  }

  if (condition.type == 'and') {
    const leftOperand = getRulesConditionFactory(condition.left as RuleConditionData);
    const rightOperand = getRulesConditionFactory(condition.right as RuleConditionData);
    if (!leftOperand || !rightOperand) {
      return null;
    }
    return new AndCondition(leftOperand, rightOperand);
  }

  if (condition.type == 'not') {
    const operand = getRulesConditionFactory(condition.operand as RuleConditionData);
    if (!operand) {
      return null;
    }
    return new NotCondition(operand);
  }

  ${providerObjectFiles
    .map((provider) => {
      return `
  if (condition.id === ${provider.moduleName}Id) {
    const cond = new ${provider.moduleName}(condition);
    cond.id = ${provider.moduleName}Id;
    return cond;
  }`;
    })
    .join('\n')}
  return null;
};

`;
}

export default generateRulesConditionFactory;
