/**
 * Describes a file that represents a component definition
 */

export interface ProviderObjectFile {
  path: string;
  moduleName: string;
  providerName: string;
}

/**
 * Generates the contents of the component factory file using a predefined string template.
 * @param components - the list of component files to include
 * @returns component factory file contents
 */
function generateFieldValueProviderFactory(providers: Array<any>): string {
  const providerObjectFiles = providers.filter((provider) => provider.path) as ProviderObjectFile[];

  return `/* eslint-disable */
// Do not edit this file, it is auto-generated at build time!
// See scripts/generate-form-value-provider-factory.ts to modify the generation of this file.

${providerObjectFiles
  .map((provider) => {
    return `import { ${provider.moduleName} } from '${provider.path}';`;
  })
  .join('\n')}

const providers = new Map(); 

${providerObjectFiles
  .map((provider) => {
    return `providers.set('${provider.providerName.toLowerCase()}',${provider.moduleName})`;
  })
  .join('\n')}

import { IBaseValueProvider } from 'src/helpers/Forms/ValueProviders/BaseValueProvider';
import { FormFieldProps } from 'lib/forms';

/**
 * @function constructor
 * @param  providerFieldsProps: Foundation.EnterpriseWeb.Core.FieldSets.Forms.FieldValueProviderSettings['fields'] - current provider related fields
 */

 export function formValueProviderFactory(
  provider: FormFieldProps,
): IBaseValueProvider | undefined {

  const providerClass = providers.get(provider.templateName.replaceAll(' ', '').toLowerCase());

  if (!!providerClass)
    return new providerClass({
      providerFieldsProps: provider.fields,
    });

  console.error(\`No provider handler defined for \${provider.templateName}\`);
  
  return undefined;
};
`;
}

export default generateFieldValueProviderFactory;
