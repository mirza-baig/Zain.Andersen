<?xml version="1.0"?>

<configuration xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/" xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:env="http://www.sitecore.net/xmlconfig/env/" xmlns:search="http://www.sitecore.net/xmlconfig/search/">
  <sitecore>
    <controlSources>
      <source patch:before="*[@namespace='Sitecore.XA.Foundation.SitecoreExtensions.CustomFields.FieldTypes']" mode="on"
              namespace="Platform.Foundation.Core.Fields" assembly="Platform" prefix="content" />
    </controlSources>
    <services>
      <configurator type="Platform.Foundation.Core.Services.SitecoreExtensionsConfigurator, Platform" />
      <register serviceType="Platform.Foundation.Core.Services.IEmailService, Platform" implementationType="Platform.Foundation.Core.Services.EmailService, Platform" lifetime="Transient" />
    </services>
    <api>
      <GraphQL>
        <defaults>
          <security>
            <publicService>
              <complexityConfiguration>
                <maxDepth>20</maxDepth>
                <maxComplexity>40000</maxComplexity>
              </complexityConfiguration>
            </publicService>
          </security>
        </defaults>
      </GraphQL>
    </api>

    <!-- Index the SiteName field so we can query it using the Exp Edge Preview API -->
    <contentSearch search:require="solr">
      <indexConfigurations>
        <defaultSolrIndexConfiguration type="Sitecore.ContentSearch.SolrProvider.SolrIndexConfiguration, Sitecore.ContentSearch.SolrProvider">
          <documentOptions type="Sitecore.ContentSearch.SolrProvider.SolrDocumentBuilderOptions, Sitecore.ContentSearch.SolrProvider">
            <exclude hint="list:AddExcludedField">
              <SiteName_CB4E9E2E tag="{CB4E9E2E-2B66-43DC-AD3F-9CAF363D28D3}">
                <patch:delete />
              </SiteName_CB4E9E2E>
            </exclude>
          </documentOptions>
        </defaultSolrIndexConfiguration>
      </indexConfigurations>
    </contentSearch>

    <layoutService>
      <serializationMaxDepth>10</serializationMaxDepth>
      <configurations>
        <config name="default">
          <rendering>
            <itemSerializer set:type="Platform.Foundation.Core.LayoutService.Serialization.ItemSerializers.ExtendedItemSerializer, Platform" />
          </rendering>
        </config>
        <config name="sxa-jss">
          <rendering>
            <itemSerializer set:type="Platform.Foundation.Core.LayoutService.Serialization.ItemSerializers.ExtendedItemSerializer, Platform" />
          </rendering>
        </config>
      </configurations>
    </layoutService>

    <commands>
      <command name="enterpriseweb:cleanupitem" type="Platform.Foundation.Core.Commands.CleanUpItem, Platform" resolve="true" />
      <command name="enterpriseweb:jssjsonview" type="Platform.Foundation.Core.Commands.JssJsonView, Platform" resolve="true" />
      <command name="enterpriseweb:managechilddatasources" type="Platform.Foundation.Core.Commands.ManageChildDataSources,  Platform" resolve="true" />
      <command name="enterpriseweb:insertchilddatasource" type="Platform.Foundation.Core.Commands.InsertChildDataSource, Platform" resolve="true" />
      <command name="enterpriseweb:insertelement" type="Platform.Foundation.Core.Commands.InsertElement, Platform" resolve="true" />
      <command name="enterpriseweb:livepreview" type="Platform.Foundation.Core.Commands.LivePreview, Platform" resolve="true" />
      <!-- rename the old event to fallback -->
      <command name="item:addmaster">
        <patch:attribute name="name">item:addmaster:enterprisewebfallback</patch:attribute>
      </command>

      <!-- now plug in its place - the command in the class needs to do its job and call fallback if it's not supposed to handle the event -->
      <command name="item:addmaster" type="Platform.Foundation.Core.Commands.AddMaster, Platform" />
    </commands>

    <events>
      <event name="item:created" role:require="Standalone or ContentManagement">
        <handler type="Platform.Foundation.Core.Events.BranchEvents, Platform" method="OnVideoCreated" resolve="true" ></handler>
        <handler type="Platform.Foundation.Core.Events.AffiliateContentEvents, Platform" method="OnContentCreated" resolve="true" ></handler>
      </event>
      <event name="item:saved" role:require="Standalone or ContentManagement">
        <handler type="Platform.Foundation.Core.Events.ItemEvents, Platform" method="OnItemSaved" resolve="true" ></handler>
        <handler type="Platform.Foundation.Core.Events.AffiliateContentEvents, Platform" method="OnItemSaved" resolve="true" ></handler>
      </event>
      <event name="item:added">
        <!-- Use custom item name handler -->
        <handler patch:before="handler[@type='Sitecore.Data.Fields.ItemEventHandler, Sitecore.Kernel']" type="Platform.Foundation.Core.Events.ItemNameEvents, Platform" method="HandleItemName"/>
        <handler type="Platform.Foundation.Core.Events.PageVariantEvents, Platform" method="HandleItemAdded"/>
      </event>
      <event name="item:copied">
        <!-- Use custom item name handler -->
        <handler type="Platform.Foundation.Core.Events.ItemNameEvents, Platform" method="HandleItemNameCopied"/>
      </event>
      <event name="item:renamed">
        <!-- Use custom item name handler -->
        <handler type="Platform.Foundation.Core.Events.ItemNameEvents, Platform" method="HandleItemName"/>
      </event>
    </events>

    <processors>
      <saveUI>
        <processor mode="on" type="Platform.Foundation.Core.Processors.SaveUI.ItemAsResourceCheck, Platform" patch:before="processor[@type='Sitecore.Pipelines.Save.CheckItemLock, Sitecore.Kernel']" />
      </saveUI>
      <uiGetMasters>
        <processor type="Platform.Foundation.Core.Processors.UiGetMasters.GetItemMasters, Platform" resolve="true" patch:before="*[@type='Sitecore.Pipelines.GetMasters.CheckSecurity, Sitecore.Kernel']" />
      </uiGetMasters>
    </processors>

    <!--
      Since this solution is designed for Sitecore-first JSS workflow, remove editor
      warnings regarding import overwrites.
    -->
    <pipelines>
      <preprocessRequest>
        <!-- FIX: fix if "http,https" is in the Settings.LoadBalancingScheme header https://sitecore.stackexchange.com/questions/31578/next-js-headless-images-not-working-from-rendering-fe-instance-system-uribuil -->
        <processor patch:before="processor[@type='Sitecore.Pipelines.HttpRequest.OverrideDialogs, Sitecore.Speak.Applications']" type="Platform.Foundation.Core.Pipelines.PreProcessRequest.LoadBalancingSchemeFix, Platform" role:require="Standalone or ContentManagement or ContentDelivery" />
      </preprocessRequest>
      <group groupName="javaScriptServices">
        <pipelines>
          <item.getItemNotifications>
            <processor type="Sitecore.JavaScriptServices.AppServices.Pipelines.GetItemNotifications.IsItemAllowedForOverwrite, Sitecore.JavaScriptServices.AppServices">
              <patch:delete />
            </processor>
          </item.getItemNotifications>
        </pipelines>
      </group>
      <group groupName="layoutService">
        <pipelines>
          <renderJsonRendering>
            <processor type="Platform.Foundation.Core.Pipelines.RenderJsonRendering.Initialize, Platform" resolve="true"
                       patch:instead="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.Initialize, Sitecore.LayoutService']"/>
            <processor type="Platform.Foundation.Core.Pipelines.RenderJsonRendering.RenderChildPlaceholders, Platform" resolve="true" patch:after="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.RenderPlaceholders, Sitecore.LayoutService']" />
            <processor type="Platform.Foundation.Core.Pipelines.RenderJsonRendering.RenderFieldPlaceholders, Platform" resolve="true" patch:after="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.RenderPlaceholders, Sitecore.LayoutService']" />
            <processor type="Platform.Foundation.Core.Pipelines.RenderJsonRendering.CustomResolveRenderingContents, Platform" resolve="true" patch:instead="*[@type='Sitecore.LayoutService.Presentation.Pipelines.RenderJsonRendering.ResolveRenderingContents, Sitecore.LayoutService']" />
          </renderJsonRendering>
          <getFieldSerializer>
            <processor type="Sitecore.LayoutService.Serialization.Pipelines.GetFieldSerializer.GetMultilistFieldSerializer, Sitecore.LayoutService">
              <patch:attribute name="type" value="Platform.Foundation.Core.Pipelines.GetFieldSerializer.GetMultilistFieldSerializer, Platform" />
            </processor>
            <processor type="Sitecore.LayoutService.Serialization.Pipelines.GetFieldSerializer.GetInternalLinkFieldSerializer, Sitecore.LayoutService">
              <patch:attribute name="type" value="Platform.Foundation.Core.Pipelines.GetFieldSerializer.GetInternalLinkFieldSerializer, Platform" />
            </processor>
            <processor type="Platform.Foundation.Core.Pipelines.GetFieldSerializer.GetRulesFieldSerializer, Platform" resolve="true" patch:before="processor[@type='Sitecore.LayoutService.Serialization.Pipelines.GetFieldSerializer.GetDefaultFieldSerializer, Sitecore.LayoutService']">
              <FieldTypes hint="list">
                <fieldType id="1">rules</fieldType>
              </FieldTypes>
            </processor>
          </getFieldSerializer>
          <getLayoutServiceContext>
            <processor type="Platform.Foundation.Core.Pipelines.GetLayoutServiceContext.GetLayoutContextSettings, Platform" resolve="true" />
          </getLayoutServiceContext>
        </pipelines>
      </group>
      <renderContentEditor>
        <!-- Inject js and css files into the content editor, see CustomContentEditorJavascript and CustomContentEditorStylesheets settings -->
        <processor patch:before="*[1]" type="Platform.Foundation.Core.Pipelines.RenderContentEditor.InjectScripts, Platform">
          <scripts hint="list:addScriptResource">
            <resource>/sitecore/shell/override/applications/content manager/dialogs/treeListExEditor/MultiRootTreeList.js</resource>
          </scripts>
          <styles hint="list:addStyleResource">
            <resource></resource>
          </styles>
        </processor>
      </renderContentEditor>
      <getContentEditorWarnings>
        <processor type="Platform.Foundation.Core.Pipelines.GetContentEditorWarnings.IsItemAsResource, Platform" />
      </getContentEditorWarnings>
      <expandInitialFieldValue>
        <processor type="Platform.Foundation.Core.Pipelines.ExpandInitialFieldValue.NameKebabToken, Platform" patch:after="processor[@type='Sitecore.Pipelines.ExpandInitialFieldValue.ReplaceVariables, Sitecore.Kernel']"/>
        <processor type="Platform.Foundation.Core.Pipelines.ExpandInitialFieldValue.ApiKeyToken, Platform" patch:after="processor[@type='Sitecore.Pipelines.ExpandInitialFieldValue.ReplaceVariables, Sitecore.Kernel']"/>
      </expandInitialFieldValue>
      <speak.client.resolveScript>
        <processor type="Sitecore.Resources.Pipelines.ResolveScript.Controls, Sitecore.Speak.Client">
          <sources hint="raw:AddSource">
            <source folder="/sitecore/shell/client/Sitecore/EnterpriseWeb/ExperienceEditor" deep="true" category="ew" pattern="*.js" />
          </sources>
        </processor>
      </speak.client.resolveScript>
    </pipelines>

    <!-- Added for calling sitecore item API -->
    <settings>
      <setting name="ExperienceEdge.EnableItemLanguageFallback" value="true"/>
      <setting name="ExperienceEdge.EnableFieldLanguageFallback" value="true"/>
      <setting name="ExperienceEdge.IncludeDependencyAncestors" value="false"/>
      <setting name="RbaWebTeamEmail" value="RbA.comWebTeam@andersencorp.com" />
      <setting name="RbaDefaultFromEmail" value="marketingservices@andersencorp.com" />
      <setting name="ContentSubmissionEmailToRole" value="Sitecore\RbA Approver" />

      <!--
        INDEXING MANAGER - DISPLAY SHORT STATISTIC
            This setting specifies whether or not to display short index statistics in the Indexing Manager Wizard.
            When enabled, the Indexing Manager Wizard does not request additional information from Solr to populate index statistics.
            It can be required if nodes of Solr Cloud can be accessed only within a private network.
            Default value: false
            NOTE: If this is patched by ContentSearch.IndexingManager.DisplayShortStatistic.config, then it pulls from the environment
                  variable 'ContentSearch_IndexingManager_DisplayShortStatistic'.
      -->
      <setting name="ContentSearch.IndexingManager.DisplayShortStatistic" set:value="true" />

      <setting name="Sitecore.Services.SecurityPolicy">
        <patch:attribute name="value" value="Sitecore.Services.Infrastructure.Web.Http.Security.ServicesOnPolicy, Sitecore.Services.Infrastructure" />
      </setting>
      <setting name="HtmlEditor.DefaultProfile">
        <patch:attribute name="value" value="/sitecore/system/Settings/Html Editor Profiles/Rich Text Full" />
      </setting>

      <!-- Use SendGrid SMTP mail server -->
      <setting name="MailServer" value="smtp.sendgrid.net" />

      <!-- Use SendGrid SMTP mail server -->
      <setting name="MailServerPort" value="587" />

      <!-- Use SendGrid SMTP mail server -->
      <setting name="MailServerUserName" value="apikey" />

      <!-- Use SendGrid SMTP mail server -->
      <setting name="MailServerPassword" value="$(env:SendGrid_MailServerPassword)" />
    </settings>
    <sites>
      <site name="shell">
        <patch:attribute name="enableItemLanguageFallback">true</patch:attribute>
        <patch:attribute name="enableFieldLanguageFallback">true</patch:attribute>
      </site>
      <site name="website">
        <patch:attribute name="enableItemLanguageFallback">true</patch:attribute>
        <patch:attribute name="enableFieldLanguageFallback">true</patch:attribute>
        <!--Needed to allow images to work on Preview site and also on local Docker-->
        <patch:attribute name="database">master</patch:attribute>
      </site>
    </sites>
    <linkManager>
      <providers>
        <add name="enterpriseLinkProvider" type="Platform.Foundation.Core.LinkProviders.EnterpriseLinkProvider, Platform" cacheExpiration="5" addAspxExtension="false" alwaysIncludeServerUrl="false" encodeNames="true" languageEmbedding="never" languageLocation="filePath" shortenUrls="true" useDisplayName="false"/>
      </providers>
    </linkManager>

    <sitecore.experienceeditor.speak.requests>
      <request name="ExperienceEditor.EW.AddPageVariant" type="Platform.Foundation.Core.ExperienceEditor.Requests.AddPageVariant, Platform"/>
      <request name="ExperienceEditor.EW.CanAddPageVariant" type="Platform.Foundation.Core.ExperienceEditor.Requests.CanAddPageVariant, Platform"/>
      <request name="ExperienceEditor.EW.DoesItemInheritFrom" type="Platform.Foundation.Core.ExperienceEditor.Requests.DoesItemInheritFrom, Platform"/>
      <request name="ExperienceEditor.EW.RetrievePageVariants" type="Platform.Foundation.Core.ExperienceEditor.Requests.RetrievePageVariants, Platform"/>
      <request name="ExperienceEditor.EW.ValidatePageVariantName" type="Platform.Foundation.Core.ExperienceEditor.Requests.ValidatePageVariantName, Platform"/>
    </sitecore.experienceeditor.speak.requests>
    </sitecore>
</configuration>
